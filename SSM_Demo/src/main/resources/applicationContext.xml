<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 加载jdbc.properties数据库连接四要素属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 扫描Spring注解的基本包,扫描的是com.edu，则dao层和service层都可以扫描到，即可以使用注解来注解dao和service -->
    <context:component-scan base-package="com.edu">
        <!-- 排除扫描SpringMVC的@Controller注解，因为它在SpringMVC中有特殊意思，被Spring扫描到就不好了 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- C3P0数据源的配置，即产生一个数据源的bean，可以通过数据源获得一个数据库的连接对象-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- ComboPooledDataSource对象有四个属性值需要注入：即连接数据库的四要素 -->
        <!-- driverClass 数据库驱动名 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <!-- jdbcUrl 连接字符串  -->
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <!-- user 登陆数据库名 -->
        <property name="user" value="${jdbc.user}"/>
        <!-- password 登陆数据库密码 -->
        <property name="password" value="${jdbc.pwd}"/>
    </bean>


    <!-- 配置Spring与Mybatis整合的SqlSessionFactory bean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入C3P0数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 注入Mybatis主配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!-- 配置扫描Mapper映射文件的bean:目的是生成Mapper动态代理来进行mybatis的操作，该bean没有id，由Spring自动调用 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory bean的名称-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 注入要扫描的mapper映射文件所在的包的名称 -->
        <property name="basePackage" value="com.edu.dao"/>
    </bean>

    <!-- AOP事务配置 -->
    <!-- 在Spring容器中产生一个JDBC事务管理器的bean -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 事务管理器有一个属性需要注入值：数据源(注入上面的C3P0数据源) -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        Spring的事务的AOP配置:和之前讲的AOP配置类似，但是使用的是tx命名空间: <tx:advice>
        transaction-manager:指定AOP的事务使用的事务管理器是transactionManager
        id="txAdvice":事务通知的id名
        <tx:advice>指AOP的通知，transactionManager就类似于"切面"。
    -->
    <tx:advice transaction-manager="transactionManager" id="txAdvice">
        <!-- 对事务的属性进行配置 -->
        <tx:attributes>
            <!--
                name="*"：所有的要被织入事务的方法， propagation="REQUIRED"：方法必须在事务中执行
                 指定所有被织入事务的业务方法必须在事务中运行
            -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置事务顾问，顾问=通知+切入点 -->
    <aop:config> <!-- AOP的配置 -->
        <!-- 切入点配置：要将事务织入给哪些业务方法 -->
        <aop:pointcut expression="execution(* com.edu.service..*.*(..))" id="pc"/>

        <!-- <aop:advisor>通过顾问完成事务织入给业务方法 -->
        <!-- advice-ref="txAdvice":指明上面配置的通知的id，pointcut-ref="pc"：指明顾问中的通知要织入给哪些切入点（业务方法） -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
    </aop:config>
</beans>